// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chat {
  id            String      @id @default(cuid())
  interestedUserId String
  donationId    Int
  messages      Message[]

  interestedUser   User      @relation(fields: [interestedUserId], references: [id])
  donation         Donation  @relation(fields: [donationId], references: [id])
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([interestedUserId, donationId], name: "unique_chat")
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  phone         String?
  isPhoneValid Boolean @default(false)
  donations     Donation[]
  useWhatsapp   Boolean @default(false)
  tokens UserPhoneToken[]

  messages Message[]
  chats Chat[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

 
model UserPhoneToken {
  id            String          @id @default(cuid())
  userId            String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  token Int
  expiresAt     DateTime @default(dbgenerated("now() + interval '5 minutes'"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Donation {
  id          Int             @id @default(autoincrement())
  title       String
  species     Species
  sex         Sex
  age         Age
  description String
  zipCode     String
  status      DonationStatus
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  images      DonationImage[]
  addressId Int @unique
  address DonationAddress @relation(fields: [addressId], references: [id], onDelete: Cascade)

  chats       Chat[]

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model DonationAddress {
  id          Int @id @default(autoincrement())
  cep String
  logradouro String
  complemento String
  unidade String
  bairro String
  localidade String
  uf String
  ibge String
  gia String
  ddd String
  siafi String

  donation Donation?
}

model DonationImage {
  id         Int      @id @default(autoincrement())
  objectPath        String
  donationId Int
  donation   Donation @relation(fields: [donationId], references: [id])
}

enum Species {
  CAT
  DOG
}

enum Sex {
  MALE
  FEMALE
}

enum Age {
  PUPPY
  ADULT
  SENIOR
}

enum DonationStatus {
  PENDING_APPROVAL
  REPPROVED
  OPEN
  DONE
  CANCELLED
}
